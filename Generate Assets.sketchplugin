// (ctrl cmd alt g)
// This command is a recreation of the Photoshop Generator functionality,
// introduced by Adobe on Photoshop CC <http://blogs.adobe.com/photoshopdotcom/2013/09/introducing-adobe-generator-for-photoshop-cc.html>

var generator = {
  version: "0.1",
  regexp: /\.png\d*\s*|\.jpg\d*\s*|\.gif\s*|\.svg\s*|\.eps\s*|\.pdf\s*|\.tif\s*|\d+%+|\d+\s*x\s*\d+/g
}

var document_path = [[doc fileURL] path].split([doc displayName])[0],
    document_name = [doc displayName].replace(".sketch",""),
    assets_folder = document_path + "/" + document_name + "-assets",
    file_manager = [NSFileManager defaultManager],
    current_page_name,
    current_artboard_name;

Array.prototype.each = function(callback){
  var count = 0;
  for (var i = 0; i < this.length(); i++){
    var el = this[i];
    callback.call(this,el,count);
    count++;
  }
}

function process_layer(layer) {
  log('Processing layer "' + [layer name] + '"');

  if(should_export(layer)) {
    // log("We should export it...");
    var layer_metadata = get_data_from_layer(layer);
    for(var i=0; i < layer_metadata.length; i++) {
      export_layer(layer, layer_metadata[i]);
    }
  };

  // Process sublayers
  if (is_group(layer)) {
    // log("Also, it's a group");
    var sublayers = [layer layers];
    sublayers.each(function(sublayer){
      process_layer(sublayer);
    });
  }
}
function should_export(layer) {
  return [layer name].match(generator.regexp);
}
function get_data_from_layer(layer) {
  // log('Getting data from ' + layer);
  var name = [layer name],
      assets = name.split(","),
      assets_data = [];

  for (var i = 0; i < assets.length; i++) {
    var current_asset = assets[i],
        filename = current_asset.replace(generator.regexp,'').replace(' ','')

    var asset_metadata = {
      name: sanitize_filename(filename),
      filetype: current_asset.split(".")[1].substr(0,3),
      // TODO: Add support for '@2x' and 'HDPI' style scales
      scale: current_asset.match(/(\d+)%/) ? current_asset.match(/(\d+)%/)[1]/100.0 : 1.0
    }
    assets_data.push(asset_metadata);
    // log('Asset scale: ' + asset_metadata.scale);
  }
  return assets_data;
}
function sanitize_filename(name){
  return name.replace(/(\s+|\:|\/)/g ,"_").replace(/__/g,"_");
}
function export_layer(layer, options) {
  log("Exporting " + options.name + ", with scale: " + options.scale);

  // var filename = assets_folder + "/" + sanitize_filename(options.name);
  var filename = assets_folder + "/" + sanitize_filename(current_page_name) + "/" + sanitize_filename(current_artboard_name) + "/" + sanitize_filename(options.name);

  // copy off-screen
  var copy = [layer duplicate];
  var frame = [copy frame];
  [frame setX:-100000];
  [frame setY:-100000];

  // export
  var rect = [copy rectByAccountingForStyleSize:[[copy absoluteRect] rect]],
      slice = [MSSlice sliceWithRect:rect scale:options.scale];

  // Maybe: add scale in filename
  // filename += "-" + options.scale + "x";
  [doc saveArtboardOrSlice:slice toFile:(filename + "." + options.filetype)];

  // remove it
  // log("Removing copy");
  [copy removeFromParent];

}
function is_group(layer) {
  return [layer isMemberOfClass:[MSLayerGroup class]];
}

function main(){
  log('##########################################################################################')
  log('Sketch Generator running')

  // Traverse pages...
  [doc pages].each(function(page){

    [doc setCurrentPage:page];

    current_page_name = [[doc currentPage] name];

    log("#####################################################################################")
    log("Traversing page: " + current_page_name);
    log("#####################################################################################")

    [file_manager createDirectoryAtPath:(assets_folder + "/" + sanitize_filename(current_page_name)) withIntermediateDirectories:true attributes:nil error:nil];

    // ...then artboards...
    var artboards = [[doc currentPage] artboards];

    if([artboards length] >= 1) {
      artboards.each(function(artboard){

        log("Traversing artboard " + current_artboard_name);

        current_artboard_name = [artboard name];
        [file_manager createDirectoryAtPath:(assets_folder + "/" + sanitize_filename(current_page_name) + "/" + sanitize_filename(current_artboard_name)) withIntermediateDirectories:true attributes:nil error:nil];

        if(should_export(artboard)) {
          export_layer(artboard, get_data_from_layer(artboard));
        }

        // ...then layers
      });
    } else {
      log("No artboards in document...");
      current_artboard_name = 'no_artboard';
      [file_manager createDirectoryAtPath:(assets_folder + "/" + sanitize_filename(current_page_name) + "/" + sanitize_filename(current_artboard_name)) withIntermediateDirectories:true attributes:nil error:nil];

      var all_layers = [[doc currentPage] layers];
      log(all_layers);
      all_layers.each(function(layer){
        process_layer(layer);
      });
    }
  });

}

// Let's go!
main();