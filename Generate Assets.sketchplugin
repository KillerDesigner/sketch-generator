// (ctrl cmd alt g)
// This command is a recreation of the Photoshop Generator functionality,
// introduced by Adobe on Photoshop CC <http://blogs.adobe.com/photoshopdotcom/2013/09/introducing-adobe-generator-for-photoshop-cc.html>

var generator = {
  version: "0.1",
  regexp: /\.png\d*\s*|\.jpg\d*\s*|\.gif\s*|\.svg\s*|\.eps\s*|\.pdf\s*|\.tif\s*|\d+%+|\d+\s*x\s*\d+/g
}

var document_path = [[doc fileURL] path].split([doc displayName])[0],
    document_name = [doc displayName].replace(".sketch",""),
    assets_folder = document_path + "/" + document_name + "-assets",
    file_manager = [NSFileManager defaultManager];

/*

From Adobe's post:

Generator allows you to create image assets in real time as you work, eliminating the tedious steps of copying, slicing and exporting each layer manually, and saving you hours of time. Simply add a file extension to the name of your layer or layer group, and Photoshop will automatically create a JPG, PNG or GIF from the contents of that layer. If you make a change to that layer, the file is immediately updated. This means that you now have a folder of images that are always up-to-date with your Photoshop design.

If you need larger dimension images for Retina displays, you can also quickly create those by adding a scaling factor.

To turn on this functionality, go to File -> Generate -> Image Assets. Now all you have to do is rename the layers or layer groups you want to export. Here are some examples of supported tags:

- .png (Default value: png32 with semi-transparent alpha), .png8, .png24, .png32
- .jpg (Default value: 9), .jpg(1-10), .jpg(1-100%)
- .gif
- 1-n%, (Number) px x (Number) px for scaling
- can also so '200x? logo.jpg', apparently

Here are some examples of how tags can be used:

- “200% logo-retina.png, logo.png” produces both a 2x and a 1x asset
- “heroImage.jpg10” produces a 1x asset with max quality
- “400% tuningfork.png, 250×250 tuningfork.jpg40%” produces a 4x PNG asset and a custom-scaled JPEG asset

For a more complete list of layer names this should support, check the tests in <https://github.com/adobe-photoshop/generator-assets/blob/master/test/test-parse-layer-name.js>

*/

function process_layer(layer) {
  log('Processing layer "' + [layer name] + '"');

  if(should_export(layer)) {
    var layer_metadata = get_data_from_layer(layer);
    for(var i=0; i < layer_metadata.length; i++) {
      export_layer(layer, layer_metadata[i]);
    }
  };
}
function should_export(layer) {
  return [layer name].match(generator.regexp);
}
function get_data_from_layer(layer) {
  log('Getting data from ' + layer);

  var name = [layer name],
      assets = name.split(","),
      assets_data = [];

  for (var i = 0; i < assets.length; i++) {
    var current_asset = assets[i],
        filename = current_asset.replace(generator.regexp,'').replace(' ','')

    var asset_metadata = {
      name: sanitize_filename(filename),
      filetype: current_asset.split(".")[1].substr(0,3)
    }
    assets_data.push(asset_metadata);
  }
  log(assets_data);
  return assets_data;
}
function sanitize_filename(name){
  return name.replace(/(\s|:|\/)/g ,"_").replace(/__/g,"_");
}
function export_layer(layer, options) {
  log("Exporting " + [layer name]);

  var filename = assets_folder + "/" + sanitize_filename(options.name) + "." + options.filetype;

  // copy off-screen
  var copy = [layer duplicate];
  var frame = [copy frame];
  [frame setX:-100000];
  [frame setY:-100000];

  // export
  var rect = [copy absoluteRect];
  [doc saveArtboardOrSlice:rect toFile:filename];

  // remove it
  [copy removeFromParent];
}

function main(){
  log('##########################################################################################')
  log('Sketch Generator running')

  var all_layers = [[doc currentPage] layers];

  for(var i=0; i < [all_layers length]; i++) {
    process_layer(all_layers[i]);
  }
}

// Let's go!
main();